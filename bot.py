import os
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# ุฅุนุฏุงุฏ ูุงุนุฏุฉ ุงูุจูุงูุงุช
def setup_database():
    conn = sqlite3.connect('language_bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS tips (
            id INTEGER PRIMARY KEY,
            tip TEXT NOT NULL
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS rules (
            id INTEGER PRIMARY KEY,
            rule TEXT NOT NULL
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS resources (
            id INTEGER PRIMARY KEY,
            resource_type TEXT NOT NULL,
            file_path TEXT NOT NULL
        )
    ''')
    conn.commit()
    conn.close()

# ุฅุถุงูุฉ ูุตูุญุฉ
def add_tip(tip: str):
    conn = sqlite3.connect('language_bot.db')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO tips (tip) VALUES (?)', (tip,))
    conn.commit()
    conn.close()

# ุฅุถุงูุฉ ูุงุนุฏุฉ
def add_rule(rule: str):
    conn = sqlite3.connect('language_bot.db')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO rules (rule) VALUES (?)', (rule,))
    conn.commit()
    conn.close()

# ุฅุถุงูุฉ ููุฑุฏ
def add_resource(resource_type: str, file_path: str):
    conn = sqlite3.connect('language_bot.db')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO resources (resource_type, file_path) VALUES (?, ?)', (resource_type, file_path))
    conn.commit()
    conn.close()

# ุนุฑุถ ุงููุตุงุฆุญ
def send_tips(update: Update, context: CallbackContext) -> None:
    conn = sqlite3.connect('language_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT tip FROM tips')
    tips = cursor.fetchall()
    conn.close()

    if tips:
        response = '\n\n'.join([tip[0] for tip in tips])
        update.message.reply_text(response)
    else:
        update.message.reply_text("ูุง ุชูุฌุฏ ูุตุงุฆุญ ุญุงููุงู.")

# ุนุฑุถ ุงูููุงุนุฏ
def send_rules(update: Update, context: CallbackContext) -> None:
    conn = sqlite3.connect('language_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT rule FROM rules')
    rules = cursor.fetchall()
    conn.close()

    if rules:
        response = '\n\n'.join([rule[0] for rule in rules])
        update.message.reply_text(response)
    else:
        update.message.reply_text("ูุง ุชูุฌุฏ ููุงุนุฏ ุญุงููุงู.")

# ุนุฑุถ ุงูููุงุฑุฏ
def send_resources(update: Update, context: CallbackContext) -> None:
    conn = sqlite3.connect('language_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT resource_type, file_path FROM resources')
    resources = cursor.fetchall()
    conn.close()

    if resources:
        for resource in resources:
            if resource[1].endswith('.pdf'):
                update.message.reply_document(open(resource[1], 'rb'))
            elif resource[1].endswith(('.mp3', '.wav')):
                update.message.reply_audio(open(resource[1], 'rb'))
            elif resource[1].endswith(('.mp4', '.avi')):
                update.message.reply_video(open(resource[1], 'rb'))
    else:
        update.message.reply_text("ูุง ุชูุฌุฏ ููุงุฑุฏ ุญุงููุงู.")

# ุชุญููู ุงููููุงุช ุงููุฑุณูุฉ
def handle_document(update: Update, context: CallbackContext) -> None:
    file = update.message.document.get_file()
    file_path = os.path.join('downloads', update.message.document.file_name)
    os.makedirs('downloads', exist_ok=True)
    file.download(file_path)
    add_resource('document', file_path)
    update.message.reply_text('ุชู ุญูุธ ุงูููู ุจูุฌุงุญ!')

# ุฏูุงู ุงูุฃูุงูุฑ ุงูุฎุงุตุฉ ุจุงูุฅุถุงูุฉ
def add_tip_command(update: Update, context: CallbackContext) -> None:
    if context.args:
        tip = ' '.join(context.args)
        add_tip(tip)
        update.message.reply_text('ุชูุช ุฅุถุงูุฉ ุงููุตูุญุฉ.')
    else:
        update.message.reply_text('ุงูุฑุฌุงุก ูุชุงุจุฉ ูุตูุญุฉ ุจุนุฏ ุงูุฃูุฑ.')

def add_rule_command(update: Update, context: CallbackContext) -> None:
    if context.args:
        rule = ' '.join(context.args)
        add_rule(rule)
        update.message.reply_text('ุชูุช ุฅุถุงูุฉ ุงููุงุนุฏุฉ.')
    else:
        update.message.reply_text('ุงูุฑุฌุงุก ูุชุงุจุฉ ุงููุงุนุฏุฉ ุจุนุฏ ุงูุฃูุฑ.')

def add_resource_command(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('ุฃุฑุณู ุงูููู ูุจุงุดุฑุฉ ูุณูููู ุจุญูุธู.')

# ุฏูุงู ุงูุฃูุงูุฑ ุงูุฃุฎุฑู
def group_link(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('ููุงูุถูุงู ุฅูู ูุฌููุนุฉ ูุงุชุณุงุจ: https://chat.whatsapp.com/example')

def collocations(update: Update, context: CallbackContext) -> None:
    if context.args:
        word = context.args[0]
        update.message.reply_text(f'Collocations with "{word}":\nmake a decision\ncatch a cold\ntake a risk')
    else:
        update.message.reply_text('ุงูุฑุฌุงุก ูุชุงุจุฉ ูููุฉ ุจุนุฏ ุงูุฃูุฑ.')

def study_plan(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('ุฎุทุฉ ุฏุฑุงุณูุฉ:\n1. ูุฑุงุกุฉ ููููุฉ\n2. ูุดุงูุฏุฉ ููุฏูููุงุช\n3. ูุญุงุฏุซุฉ ูุตู ุณุงุนุฉ')

def common_mistakes(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('ุฃุฎุทุงุก ุดุงุฆุนุฉ:\nโ He do\nโ He does\nโ I am agree\nโ I agree')

def language_resources(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('ููุงูุน ูููุฏุฉ:\n- Duolingo\n- BBC Learning English\n- EnglishClass101')

def conversation_starters(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('ููุงุถูุน ููููุงุด:\n- ุงูุณูุฑ\n- ุงูุชูููููุฌูุง\n- ุงูุซูุงูุฉ')

def grammar_exercises(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('ุชูุงุฑูู ูุญููุฉ:\n- Exercise 1: Present Simple\n- Exercise 2: Past Tense')

def cultural_facts(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('ุญูุงุฆู:\n๐ฌ๐ง ุงูุจุฑูุทุงูููู ูุดุฑุจูู ุฃูุซุฑ ูู 165 ููููู ููุจ ุดุงู ููููุงู!')

def listening_exercises(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('ุชูุงุฑูู ุงุณุชูุงุน:\n- VOA Learning English\n- TED Talks')

def writing_tips(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('ูุตุงุฆุญ ูููุชุงุจุฉ:\n- ุฑุงุฌุน ุงูููุงุนุฏ\n- ุงุณุชุฎุฏู ุฌูู ูุตูุฑุฉ\n- ุชุฌูุจ ุงูุชูุฑุงุฑ')

def idiomatic_expressions(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('ุชุนุจูุฑุงุช ุงุตุทูุงุญูุฉ:\n- Break the ice\n- Hit the books\n- Under the weather')

def language_exchange(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('ููููู ุงูุนุซูุฑ ุนูู ุดุฑูู ูุบุฉ ุนุจุฑ ููุงูุน ูุซู: Tandem, HelloTalk')

def study_groups(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('ูุฌููุนุงุช ุงูุฏุฑุงุณุฉ ุชููุธู ูู ุฃุณุจูุน. ุงูุถู ููุฌููุนุชูุง ุนูู Telegram!')

def news(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('๐ฐ ุฎุจุฑ ุงูููู:\nScientists discover new English dialect in Antarctica!')

def language_jokes(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('๐ ููุชุฉ:\nWhy did the verb break up with the noun?\nBecause they had no agreement!')

def progress_check(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('๐ ูุชูููู ุชูุฏูู:\n- ูู ุชุญุณูู ูุทููุ\n- ูู ุชุณุชุทูุน ููู ูุญุงุฏุซุฉ ูุงููุฉุ')

# ุฏุงูุฉ ุงูุจุฏุก
def start(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('ุฃููุงู ุจู ูู ุจูุช ูุนูุฏ ุงููุบุฉ ุงูุฅูุฌููุฒูุฉ! ุงุณุชุฎุฏู ุงูุฃูุงูุฑ ุงูุชุงููุฉ:\n'
                              '/add_tip - ูุฅุถุงูุฉ ูุตูุญุฉ\n'
                              '/add_rule - ูุฅุถุงูุฉ ูุงุนุฏุฉ\n'
                              '/add_resource - ูุฅุถุงูุฉ ููู\n'
                              '/tips - ูุนุฑุถ ุงููุตุงุฆุญ\n'
                              '/rules - ูุนุฑุถ ุงูููุงุนุฏ\n'
                              '/resources - ูุนุฑุถ ุงูููุงุฑุฏ\n'
                              '/join_group - ุงูุงูุถูุงู ูููุฌููุนุฉ\n'
                              '/collocations [ูููุฉ] - ุชุนุจูุฑุงุช ุดุงุฆุนุฉ\n'
                              '/study_plan - ุฎุทุฉ ุฏุฑุงุณูุฉ\n'
                              '/common_mistakes - ุฃุฎุทุงุก ุดุงุฆุนุฉ\n'
                              '/language_resources - ููุงุฑุฏ ุชุนููููุฉ\n'
                              '/conversation_starters - ููุงุถูุน ููููุงุด\n'
                              '/grammar_exercises - ุชูุงุฑูู ูุญููุฉ\n'
                              '/cultural_facts - ุญูุงุฆู ุซูุงููุฉ\n'
                              '/listening_exercises - ุชูุงุฑูู ุงุณุชูุงุน\n'
                              '/writing_tips - ูุตุงุฆุญ ูุชุงุจุฉ\n'
                              '/idiomatic_expressions - ุชุนุจูุฑุงุช ุงุตุทูุงุญูุฉ\n'
                              '/language_exchange - ุชุจุงุฏู ูุบูู\n'
                              '/study_groups - ูุฌููุนุงุช ุฏุฑุงุณุฉ\n'
                              '/news - ุฃุฎุจุงุฑ\n'
                              '/language_jokes - ููุงุช\n'
                              '/progress_check - ุชูููู ุงูุชูุฏู')

# ุชุดุบูู ุงูุจูุช
def main():
    setup_database()
    TOKEN = os.environ.get("BOT_TOKEN")
    if not TOKEN:
        print("โ ูู ูุชู ุงูุนุซูุฑ ุนูู ุงูุชููู. ุชุฃูุฏ ูู ุถุจุท ูุชุบูุฑ ุงูุจูุฆุฉ BOT_TOKEN.")
        return

    updater = Updater(TOKEN)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("add_tip", add_tip_command))
    dp.add_handler(CommandHandler("add_rule", add_rule_command))
    dp.add_handler(CommandHandler("add_resource", add_resource_command))
    dp.add_handler(CommandHandler("tips", send_tips))
    dp.add_handler(CommandHandler("rules", send_rules))
    dp.add_handler(CommandHandler("resources", send_resources))
    dp.add_handler(CommandHandler("join_group", group_link))
    dp.add_handler(CommandHandler("collocations", collocations))
    dp.add_handler(CommandHandler("study_plan", study_plan))
    dp.add_handler(CommandHandler("common_mistakes", common_mistakes))
    dp.add_handler(CommandHandler("language_resources", language_resources))
    dp.add_handler(CommandHandler("conversation_starters", conversation_starters))
    dp.add_handler(CommandHandler("grammar_exercises", grammar_exercises))
    dp.add_handler(CommandHandler("cultural_facts", cultural_facts))
    dp.add_handler(CommandHandler("listening_exercises", listening_exercises))
    dp.add_handler(CommandHandler("writing_tips", writing_tips))
    dp.add_handler(CommandHandler("idiomatic_expressions", idiomatic_expressions))
    dp.add_handler(CommandHandler("language_exchange", language_exchange))
    dp.add_handler(CommandHandler("study_groups", study_groups))
    dp.add_handler(CommandHandler("news", news))
    dp.add_handler(CommandHandler("language_jokes", language_jokes))
    dp.add_handler(CommandHandler("progress_check", progress_check))
    dp.add_handler(MessageHandler(Filters.document, handle_document))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
